// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sonny.Repository.Data;

namespace Sonny.WebApi.Migrations
{
    [DbContext(typeof(SonnyDbContext))]
    [Migration("20210311162558_first 4")]
    partial class first4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Sonny.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Complement")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("State")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Sonny.Domain.Entities.Administrative.Client.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CNPJ")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAssured")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("MonthlyPayment")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Responsible")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TypeOfClient")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Sonny.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("phoneNumberUniqueId")
                        .HasColumnType("int");

                    b.Property<int?>("socialUniqueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("phoneNumberUniqueId");

                    b.HasIndex("socialUniqueId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Sonny.Domain.Entities.PhoneNumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("phoneNumberEntity");
                });

            modelBuilder.Entity("Sonny.Domain.Entities.PhoneNumberUnique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("PhoneNumberKindId")
                        .HasColumnType("int");

                    b.Property<string>("UniquePhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumberKindId");

                    b.ToTable("phoneNumberUniques");
                });

            modelBuilder.Entity("Sonny.Domain.Entities.SocialEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("SocialEntities");
                });

            modelBuilder.Entity("Sonny.Domain.Entities.SocialUnique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Unique")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("socialEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("socialEntityId");

                    b.ToTable("SocialUniques");
                });

            modelBuilder.Entity("Sonny.Domain.Entities.Administrative.Client.Client", b =>
                {
                    b.HasOne("Sonny.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Sonny.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("Sonny.Domain.Entities.Contact", b =>
                {
                    b.HasOne("Sonny.Domain.Entities.PhoneNumberUnique", "phoneNumberUnique")
                        .WithMany()
                        .HasForeignKey("phoneNumberUniqueId");

                    b.HasOne("Sonny.Domain.Entities.SocialUnique", "socialUnique")
                        .WithMany()
                        .HasForeignKey("socialUniqueId");
                });

            modelBuilder.Entity("Sonny.Domain.Entities.PhoneNumberUnique", b =>
                {
                    b.HasOne("Sonny.Domain.Entities.PhoneNumberEntity", "PhoneNumberKind")
                        .WithMany()
                        .HasForeignKey("PhoneNumberKindId");
                });

            modelBuilder.Entity("Sonny.Domain.Entities.SocialUnique", b =>
                {
                    b.HasOne("Sonny.Domain.Entities.SocialEntity", "socialEntity")
                        .WithMany()
                        .HasForeignKey("socialEntityId");
                });
#pragma warning restore 612, 618
        }
    }
}
